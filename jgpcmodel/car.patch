*** ../latest/jgpcmodel/car.cpp	2011-06-26 13:20:04.000000000 -0400
--- car.cpp	2011-07-03 09:00:15.290988188 -0400
***************
*** 94,105 ****
    // set default colors for the 2 body part boxes
    setBodyColor(0,0xCC5500);  // orange
    setBodyColor(1,0xFFFFFF);
! 
    currentpos.px = x;
    currentpos.py = y;
    prevpos.px = 0;
    prevpos.py = 0;
! 	
    //center of mass offset body. 
    //(hang another copy of the body COMOFFSET units below it by a fixed joint)
    /*
--- 94,105 ----
    // set default colors for the 2 body part boxes
    setBodyColor(0,0xCC5500);  // orange
    setBodyColor(1,0xFFFFFF);
!   /*
    currentpos.px = x;
    currentpos.py = y;
    prevpos.px = 0;
    prevpos.py = 0;
!   */	
    //center of mass offset body. 
    //(hang another copy of the body COMOFFSET units below it by a fixed joint)
    /*
***************
*** 210,221 ****
    // set default colors for the 2 body part boxes
    setBodyColor(0,0xCC5500);  // orange
    setBodyColor(1,0xFFFFFF);
! 
    currentpos.px = x;
    currentpos.py = y;
    prevpos.px = 0;
    prevpos.py = 0;
! 	
    //center of mass offset body. 
    //(hang another copy of the body COMOFFSET units below it by a fixed joint)
    /*
--- 210,221 ----
    // set default colors for the 2 body part boxes
    setBodyColor(0,0xCC5500);  // orange
    setBodyColor(1,0xFFFFFF);
!   /*
    currentpos.px = x;
    currentpos.py = y;
    prevpos.px = 0;
    prevpos.py = 0;
!   */	
    //center of mass offset body. 
    //(hang another copy of the body COMOFFSET units below it by a fixed joint)
    /*
***************
*** 242,248 ****
    counter = 0;
    speed =0.0;
    steer = 0.0;
!   showWaypoints = false;
    steering = false;
    ready = 1;
    out = NULL;
--- 242,248 ----
    counter = 0;
    speed =0.0;
    steer = 0.0;
!   //showWaypoints = false;
    steering = false;
    ready = 1;
    out = NULL;
***************
*** 257,263 ****
    counter = 0;
    speed =0.0;
    steer = 0.0;
!   showWaypoints = false;
    steering = false;
    out = NULL;
    ready = 0;
--- 257,263 ----
    counter = 0;
    speed =0.0;
    steer = 0.0;
!   //showWaypoints = false;
    steering = false;
    out = NULL;
    ready = 0;
***************
*** 289,319 ****
    for (i=0; i< 4; i++) dsDrawCylinder (dGeomGetPosition(sphere[i]),
  					   dGeomGetRotation(sphere[i]),
  					     0.02f,wradius);
-   /*
-   if (hasRadar && radar->isScanning() && counter > 20) // don't scan during drop 
-     radar->draw(cheight+wradius);
-   */
- 
-   //not completed yet
-   // draw the waypoints as flat cylinders
-   /*
-   const float rt[] = {1.0,0.0,0.0,0.0,
-                       0.0,1.0,0.0,0.0,
-                       0.0,0.0,1.0,0.0,
-                       0.0,0.0,0.0,1.0};
-   if (numWaypoints > 0 && showWaypoints) {
-     for (i = 0; i < numWaypoints; i++) {
-       const float p[] = {waypoints[i].px,waypoints[i].py,0.0};
-       if (i < wpcounter) // already passed draw as gray
- 	dsSetColor (1.0,1.0,1.0);
-       else if (i = wpcounter) // set to red -- current target
-         dsSetColor (1.0,0.0,0.0);
-       else 
-         dsSetColor (1.0,1.0,0.0); // yellow
-       dsDrawCylinder(p,rt,0.25,0.06);
-     }
-   }
-   */
  
  };
  
--- 289,294 ----
***************
*** 331,440 ****
  
  void Car::step() {
    const dReal *a = getCarPos();
!   
    if (subcnt-- == 0) {
      steer -= adjsteer;
      adjsteer = 0.0;
      prevpos.px = a[0];
      prevpos.py = a[1];
    }
! 
    if (out != NULL && counter % RECORDINTERVAL == 0) 
      fprintf(out,"%i,%f,%f,%f\n",counter,a[0],a[1],a[2]);
-   
-   // scan radar every 50 steps by default -- adj with setFrequency()
-   /*
-   if (hasRadar) {
-     if (counter %  radar->getFrequency() == 0) {
-       BOGEY ht;
-       P2D pt;
-       pt.px = a[0];
-       pt.py = a[1];
-       float hdg = getHeading();
-       radar->scan(&ht,pt,hdg);
-       if (radar->getHitCount() > 0) {
- 	wm->addLocation(ht);
- 	if (CARDEBUG > 0) {
- 	  printf("Scan at %i found bogey %i,%i type,id @ %f,%f\n",counter,ht.obsType,
- 		 ht.identifier,ht.px,ht.py);
- 	  printf("World map now has %i locations\n",wm->getNumberLocations());
- 	}
-       } else if (CARDEBUG > 1) { 
- 	printf("Scan at %i pos %f,%f hdg %f no bogies\n",counter,pt.px,pt.py,hdg);
-       }
-     }
-   }
-   */
-   // only if waypoints are in play
-   if (numWaypoints > 0) {
-     if (counter % CADJINTERVAL == 0) {
-       prevpos.px = currentpos.px;
-       prevpos.py = currentpos.py;
-       currentpos.px = a[0];
-       currentpos.py = a[1];
-       const dReal *y = dGeomGetRotation(box[0]);
-       float heading = getHeading();
-       //printf("heading = %f ",heading);
-       float dheading = getDestinationHeading();
-       if (CARDEBUG > 1) {
- 	printf(" cpos %f,%f => destpos  %f,%f\n",a[0],a[1],destination.px,destination.py);
- 	//printf(" => desired heading = %f\n",dheading);
- 	printf("y axis rotation %f,%f,%f\n",y[4],y[5],y[6]);
- 	printf("x axis rotation %f,%f,%f\n",y[0],y[1],y[2]);
-       }
-  
-       float yintercept = YoffsetFromGoal(prevpos,currentpos,destination.px);
-       // adjust direction if more than 2.5 % off
-       //float pcterror = (yintercept - destination.py) / destination.py;
-       // error from relative heading version
-       // need to deal with situation where heading is 350 and dest is 10
-       // or vice versa
-       float pcterror;
-       if (dheading < 180 && heading > 180) {
- 	pcterror = (dheading + 360 - heading) / 360;
-       } else if (dheading > 180 && heading < 180) {
- 	pcterror = (dheading -360 + heading) / 360;
-       } else if (dheading < 180 && heading < 180) {
- 	pcterror = -(dheading - heading) / 360;
-       }  else {
- 	pcterror = (dheading - heading) / 360;
-       }
-       pcterror *= 4; // step up adjust vs steer
-       if (pcterror < -0.025 || pcterror > 0.025) { 
- 	// steer by amount of error for 5 iterations then return to straight
- 	adjsteer = pcterror;
- 	if (adjsteer < -0.9)
- 	  adjsteer = -0.9;
- 	else if (adjsteer > 0.9)
- 	  adjsteer = 0.9;
- 	steer += adjsteer;
- 	if (CARDEBUG > 0)
- 	  printf("heading = %f desired heading = %f => adjsteer = %f\n",heading, dheading, adjsteer);
- 	// reset the counter to return to straight steering
- 	// if the error is large stay in the turn longer
- 	if (fabsf(pcterror) > 1.1) 
- 	  subcnt = 25;
- 	else
- 	  subcnt = CCNGSTEPS;
- 	
-       }
-       
-     }
-   }
-     
-   // update the waypoint
-   if (wpcounter < numWaypoints-1) { 
-     if (distanceRemaining(currentpos,destination) < 1.0 || 
- 	currentpos.px > destination.px) {
-       // move to next waypoint
-       wpcounter++;
-       destination.px = waypoints[wpcounter].px;
-       destination.py = waypoints[wpcounter].py;
-       printf("waypoint change wp %i %f %f cp %f %f\n",wpcounter,
- 	     waypoints[wpcounter].px,waypoints[wpcounter].py,
- 	     currentpos.px,currentpos.py);
-     } 
-   } 
  
  
    if (counter == cmds[nextCommand].cnt) {
--- 306,321 ----
  
  void Car::step() {
    const dReal *a = getCarPos();
!   /* 
    if (subcnt-- == 0) {
      steer -= adjsteer;
      adjsteer = 0.0;
      prevpos.px = a[0];
      prevpos.py = a[1];
    }
!   */
    if (out != NULL && counter % RECORDINTERVAL == 0) 
      fprintf(out,"%i,%f,%f,%f\n",counter,a[0],a[1],a[2]);
  
  
    if (counter == cmds[nextCommand].cnt) {
***************
*** 502,536 ****
    nextCommand = 0;
    fclose(in);
  };
- 
- void Car::loadWayPointFile(const char* infile) {
-   int r = 0;
-   // read in waypoints if file exits
-   FILE *wpfile = fopen(infile,"r");
-   if (wpfile == NULL) {
-     printf("cannot open %s -- setting waypoints to 0\n",infile);
-     numWaypoints = 0;
-     wpcounter = -1;
-     //exit(-1);
-   } else {
-     while (!feof(wpfile) && r < MAXWAYPOINTS) {
-       fscanf(wpfile,"%f\t%f\n",
- 	     &waypoints[r].px,&waypoints[r].py);
-       if (r < MAXWAYPOINTS)
- 	r++;
-     }
-     numWaypoints = r;
-     wpcounter = 0;
-     fclose(wpfile);
-   }
-   // set destination to first waypoint 
-   if (numWaypoints > 0) {
-     destination.px = waypoints[0].px;
-     destination.py = waypoints[0].py;
-   }
- 
- };
- 
  void Car::setBodyColor(int bpart, int shade) {
    if (bpart < bodyPartCount) 
      color[bpart] = shade;
--- 383,388 ----
***************
*** 580,586 ****
    return(heading);
  
  };
! 
  float Car::getDestinationHeading() {
    /***	 desired heading would be from current pos.y to dest.y
  	 if dest.x > cur.x then use 90 - angle
--- 432,438 ----
    return(heading);
  
  };
! /*
  float Car::getDestinationHeading() {
    /***	 desired heading would be from current pos.y to dest.y
  	 if dest.x > cur.x then use 90 - angle
***************
*** 596,602 ****
  	 x > x1 && y > y1 dhead in lower right q  180 - y/y
  	 
  
!   */
    float dheading;
    if (currentpos.px < destination.px && currentpos.py < destination.py) {
      dheading = 360 - fabsf(atanf((currentpos.py-destination.py)/(currentpos.px-destination.px))*57.29578);
--- 448,454 ----
  	 x > x1 && y > y1 dhead in lower right q  180 - y/y
  	 
  
!   
    float dheading;
    if (currentpos.px < destination.px && currentpos.py < destination.py) {
      dheading = 360 - fabsf(atanf((currentpos.py-destination.py)/(currentpos.px-destination.px))*57.29578);
***************
*** 612,618 ****
    return(dheading);
  
  };
! 
  void Car::gatherPositionAndAttitude(double *pos) {
    // pos is a 6 value array of doubles roll, pitch, yaw, x, y, z
    // calc these later
--- 464,470 ----
    return(dheading);
  
  };
! */
  void Car::gatherPositionAndAttitude(double *pos) {
    // pos is a 6 value array of doubles roll, pitch, yaw, x, y, z
    // calc these later
***************
*** 623,629 ****
    pos[3] = (double) p[0];
    pos[4] = (double) p[1];
    pos[5] = (double) p[2];
! }
  
  float Car::YoffsetFromGoal(P2D p2, P2D p1, float gx) {
    /* the formula for the line that runs thru 2 points is:
--- 475,481 ----
    pos[3] = (double) p[0];
    pos[4] = (double) p[1];
    pos[5] = (double) p[2];
! };
  
  float Car::YoffsetFromGoal(P2D p2, P2D p1, float gx) {
    /* the formula for the line that runs thru 2 points is:
